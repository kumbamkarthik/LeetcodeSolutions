package Karthik1;

public class kinghtsRecursion {
	public static void main(String[] args) {
		int knights = 4;
		boolean board[][] = new boolean[knights][knights];
		nKnights(board,0,0,knights);
	}
	
	private static void nKnights(boolean board[][],int row,int col,int knights) {
		if(knights==0) {
			display(board);
			System.out.println();
			return;
		}
		if(row==board.length-1 && col==board.length) {
			return;
		}
		if(col==board.length) {
			nKnights(board,row+1,0,knights);
			return;
		}
		if(isSafe(board,row,col)) {
			board[row][col] = true;
			nKnights(board,row,col+1,knights-1);
			board[row][col] = false;
		}
		nKnights(board,row,col+1,knights);
	}
	
	private static boolean isSafe(boolean board[][],int row,int col) {
		if(isValid(row-2,col-1,board)) {
			if(board[row-2][col-1]) {
				return false;
			}
		}
		if(isValid(row-2,col+1,board)) {
			if(board[row-2][col+1]) {
				return false;
			}
		}
		if(isValid(row-1,col-2,board)) {
			if(board[row-1][col-2]) {
				return false;
			}
		}
		if(isValid(row-1,col+2,board)) {
			if(board[row-1][col+2]) {
				return false;
			}
		}
		return true;
	}
	
	private static boolean isValid(int r,int c,boolean board[][]) {
		if(r>=0&&r<board.length&&c>=0&&c<board.length) {
			return true;
		}
		return false;
	}
	
	private static void display(boolean board[][]) {
		for(boolean row []: board) {
			for(boolean element: row) {
				if(element) {
					System.out.print("K");
				}
				else {
					System.out.print("X");
				}
			}
			System.out.println();
		}
	}

}
