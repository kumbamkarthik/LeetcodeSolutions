class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(0,target,candidates,new ArrayList<Integer>(),ans);
        return ans;
    }
    private static void dfs(int ele,int target,int[] candidates,List<Integer> path,
                List<List<Integer>> ans){
                    if(target<0){
                        return;
                    }
                    if(target==0){
                        ans.add(new ArrayList<>(path));
                        return;
                    }
                    for(int i=ele;i<candidates.length;i++){
                        path.add(candidates[i]);
                        dfs(i,target-candidates[i],candidates,path,ans);
                        path.remove(path.size()-1);
                    }
                }
}
